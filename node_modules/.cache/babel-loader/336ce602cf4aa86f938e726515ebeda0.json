{"ast":null,"code":"var _jsxFileName = \"/home/mete/Desktop/form-manager/src/components/Modal/Modal.js\";\nimport React, { Component } from \"react\";\n\nclass Modal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formInputModel: {},\n      modalName: \"\"\n    };\n\n    this.createForm = () => {\n      if (this.state.formInputModel) {\n        /** Object to Array */\n        let model = Object.keys(this.state.formInputModel).map(key => this.state.formInputModel[key]);\n        return model.map(item => {\n          if (item.length) {\n            return item.map(item => {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                key: item.name,\n                className: \"form-group row\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 25,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(\"label\", {\n                htmlFor: \"surname\",\n                className: \"col-sm-4 col-form-label\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 33\n                }\n              }, item.name, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"col-sm-8\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 27,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"input\", {\n                key: item.name,\n                name: item.name,\n                className: \"form-control\",\n                type: \"text\",\n                value: item.value,\n                placeholder: \"Default input\",\n                onChange: event => {\n                  this.inputChangeHandler(event, item);\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 28,\n                  columnNumber: 37\n                }\n              })));\n            });\n          } else {\n            if (item.name !== \"Created At\") {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                key: item.name,\n                className: \"form-group row\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(\"label\", {\n                htmlFor: \"surname\",\n                className: \"col-sm-4 col-form-label\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 33\n                }\n              }, item.name, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n                className: \"col-sm-8\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(\"input\", {\n                key: item.name,\n                name: item.name,\n                className: \"form-control\",\n                type: \"text\",\n                value: item.value,\n                placeholder: \"Default input\",\n                onChange: event => {\n                  this.inputChangeHandler(event, item);\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 37\n                }\n              })));\n            }\n          }\n        });\n      }\n    };\n\n    this.validationControl = (item, value, state) => {\n      if (item.dataType === \"STRING\") {\n        if (item.value.length <= item.charLength) {\n          this.setState({\n            formInputModel: state\n          });\n        } else {\n          console.log(\"value must be small than 20\");\n        }\n      }\n\n      if (item.dataType === \"NUMBER\") {\n        function isInt(value) {\n          var x;\n          return isNaN(value) ? !1 : (x = parseFloat(value), (0 | x) === x);\n        }\n\n        if (item.value.length <= item.charLength && isInt(item.value)) {\n          this.setState({\n            formInputModel: state\n          });\n        } else {\n          console.log(\"number must be small than 99 and must be integer\");\n        }\n      }\n    };\n\n    this.inputChangeHandler = (event, item) => {\n      let copyFromInput = JSON.parse(JSON.stringify(this.state.formInputModel));\n      Object.keys(copyFromInput).map(key => {\n        if (!copyFromInput[key].length) {\n          if (copyFromInput[key].name === item.name) {\n            copyFromInput[key].value = event.target.value;\n            this.validationControl(copyFromInput[key], copyFromInput[key].value, copyFromInput);\n          }\n        } else {\n          copyFromInput[key].map(i => {\n            if (i.name === item.name) {\n              i.value = event.target.value;\n              this.validationControl(i, i.value, copyFromInput);\n            }\n          });\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      formInputModel: this.props.formInputModel,\n      modalName: this.props.modalName\n    });\n  }\n\n  render() {\n    let modalStyleClass = this.props.modalState === true ? \"block\" : \"none\";\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: modalStyleClass,\n        backgroundColor: 'rgba(0, 0, 0, 0.2)'\n      },\n      className: \"modal\",\n      role: \"dialog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-dialog\",\n      role: \"document\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"modal-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    }, this.state.modalName), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.closeModalHandler,\n      type: \"button\",\n      className: \"close\",\n      \"data-dismiss\": \"modal\",\n      \"aria-label\": \"Close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }\n    }, \"\\xD7\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, this.createForm()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-footer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        this.props.saveHandler(this.state.formInputModel);\n      },\n      type: \"button\",\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }\n    }, \"Save changes\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.closeModalHandler,\n      type: \"button\",\n      className: \"btn btn-secondary\",\n      \"data-dismiss\": \"modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 29\n      }\n    }, \"Close\"))))));\n  }\n\n}\n\nexport default Modal;","map":{"version":3,"sources":["/home/mete/Desktop/form-manager/src/components/Modal/Modal.js"],"names":["React","Component","Modal","state","formInputModel","modalName","createForm","model","Object","keys","map","key","item","length","name","value","event","inputChangeHandler","validationControl","dataType","charLength","setState","console","log","isInt","x","isNaN","parseFloat","copyFromInput","JSON","parse","stringify","target","i","componentDidMount","props","render","modalStyleClass","modalState","display","backgroundColor","closeModalHandler","saveHandler"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass Modal extends Component {\n\n    state = {\n        formInputModel:{},\n        modalName:\"\"\n    }\n\n    componentDidMount() {\n        this.setState({\n            formInputModel:this.props.formInputModel,\n            modalName:this.props.modalName\n        })\n    }\n    \n    createForm = () => {\n        if(this.state.formInputModel){\n            /** Object to Array */\n            let model = Object.keys(this.state.formInputModel).map((key) => this.state.formInputModel[key])\n            return model.map((item)=>{\n                if(item.length){\n                    return item.map((item)=> {\n                        return(\n                            <div key={item.name} className=\"form-group row\">\n                                <label htmlFor=\"surname\" className=\"col-sm-4 col-form-label\">{item.name} </label>\n                                <div className=\"col-sm-8\">\n                                    <input\n                                    key={item.name} \n                                    name={item.name} \n                                    className=\"form-control\" \n                                    type=\"text\" \n                                    value={item.value}\n                                    placeholder=\"Default input\" \n                                    onChange={(event)=>{this.inputChangeHandler(event,item)}}/>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n                else {\n                    if(item.name !== \"Created At\"){\n                        return (\n                            <div key={item.name} className=\"form-group row\">\n                                <label htmlFor=\"surname\" className=\"col-sm-4 col-form-label\">{item.name} </label>\n                                <div className=\"col-sm-8\">\n                                    <input\n                                    key={item.name} \n                                    name={item.name} \n                                    className=\"form-control\" \n                                    type=\"text\" \n                                    value={item.value}\n                                    placeholder=\"Default input\" \n                                    onChange={(event)=>{this.inputChangeHandler(event,item)}}/>\n                                </div>\n                            </div>\n                        )\n                    }\n                  \n                }\n            })\n        }\n    }\n\n    validationControl = (item,value,state) => { \n        if(item.dataType === \"STRING\"){\n            if(item.value.length<=item.charLength){\n                this.setState({\n                    formInputModel:state\n                })\n            }\n            else {\n                console.log(\"value must be small than 20\")\n            }\n        }\n        if(item.dataType === \"NUMBER\"){\n            function isInt(value) {\n                var x;\n                return isNaN(value) ? !1 : (x = parseFloat(value), (0 | x) === x);\n            }\n            if(item.value.length<=item.charLength && isInt(item.value)){\n                this.setState({\n                    formInputModel:state\n                })\n            }\n            else {\n                console.log(\"number must be small than 99 and must be integer\")\n            }\n        }\n    }\n\n    inputChangeHandler = (event,item) => {\n        let copyFromInput = JSON.parse(JSON.stringify(this.state.formInputModel))\n        Object.keys(copyFromInput).map((key) => {\n            if(!copyFromInput[key].length){\n                if(copyFromInput[key].name===item.name){\n                    copyFromInput[key].value = event.target.value\n                    this.validationControl(copyFromInput[key],copyFromInput[key].value,copyFromInput)\n                }\n            }\n            else{\n                copyFromInput[key].map((i)=> {\n                    if(i.name ===item.name){\n                        i.value = event.target.value\n                        this.validationControl(i,i.value,copyFromInput)\n                    }\n                })\n            }\n        })\n    }\n\n    \n\n    render() {\n        let modalStyleClass = (this.props.modalState===true)?\"block\":\"none\";\n        return (\n            <React.Fragment>\n                <div style={{display:modalStyleClass,backgroundColor:'rgba(0, 0, 0, 0.2)'}} className=\"modal\" role=\"dialog\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\">{this.state.modalName}</h5>\n                            <button onClick={this.props.closeModalHandler} type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                            <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                        {this.createForm()}\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button onClick={()=>{\n                                this.props.saveHandler(this.state.formInputModel)\n                            }} type=\"button\" className=\"btn btn-primary\">Save changes</button>\n                            <button onClick={this.props.closeModalHandler} type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        )\n    }\n\n}\n\n\nexport default Modal;"]},"metadata":{},"sourceType":"module"}